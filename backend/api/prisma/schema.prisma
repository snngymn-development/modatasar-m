generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Customer {
  id             String    @id @default(cuid())
  name           String
  phone          String?
  email          String?
  city           String?
  isProtocol     Boolean   @default(false)
  stars          Int       @default(0)
  priority       String    @default("NORMAL")
  tags           String    @default("")
  status         String    @default("ACTIVE")
  lastActivityAt DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  orders         Order[]
}

model Supplier {
  id         String      @id @default(cuid())
  name       String
  phone      String?
  email      String?
  city       String?
  category   String?
  status     String      @default("ACTIVE")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  purchases  Purchase[]
  stockCards StockCard[]
}

model Product {
  id             String             @id @default(cuid())
  name           String
  model          String?
  color          String?
  size           String?
  category       String?
  tags           String             @default("")
  status         String             @default("AVAILABLE")
  createdAt      DateTime           @default(now())
  receiptLines   GoodsReceiptLine[]
  purchaseItems  PurchaseItem[]
  stockMovements StockMovement[]
}

model Order {
  id           String    @id @default(cuid())
  type         String
  customerId   String
  organization String?
  deliveryDate DateTime?
  total        Int
  collected    Int
  status       String
  stage        String?
  createdAt    DateTime  @default(now())
  customer     Customer  @relation(fields: [customerId], references: [id])
  rental       Rental?
}

model Rental {
  id           String   @id @default(cuid())
  orderId      String   @unique
  productId    String
  start        DateTime
  end          DateTime
  organization String?
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model AgendaEvent {
  id        String   @id @default(cuid())
  productId String
  type      String
  start     DateTime
  end       DateTime
  note      String?
  createdAt DateTime @default(now())
}

model CalendarEvent {
  id          String    @id @default(cuid())
  type        String
  title       String
  start       DateTime
  end         DateTime?
  emoji       String
  status      String    @default("PLANNED")
  customerId  String?
  assigneeId  String?
  resourceId  String?
  sourceTable String?
  sourceId    String?
  payload     String?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([type, start])
  @@index([assigneeId, start])
  @@index([customerId, start])
  @@index([resourceId, start])
  @@index([start, end])
}

model Purchase {
  id              String             @id @default(cuid())
  code            String?            @unique
  date            DateTime           @default(now())
  supplierId      String
  type            String
  status          String             @default("DRAFT")
  paymentStatus   String             @default("UNPAID")
  subTotal        Int                @default(0)
  discountTot     Int                @default(0)
  chargeTot       Int                @default(0)
  vatRate         Float              @default(0.20)
  vatTot          Int                @default(0)
  roundingAdj     Int                @default(0)
  total           Int                @default(0)
  paid            Int                @default(0)
  note            String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  receipts        GoodsReceipt[]
  supplier        Supplier           @relation(fields: [supplierId], references: [id])
  headerCharges   PurchaseCharge[]
  headerDiscounts PurchaseDiscount[]
  items           PurchaseItem[]

  @@index([supplierId, date, status])
}

model PurchaseItem {
  id              String             @id @default(cuid())
  purchaseId      String
  productId       String?
  description     String?
  qtyOrdered      Int
  qtyReceived     Int                @default(0)
  unitPrice       Int
  lineDiscountTot Int                @default(0)
  lineChargeTot   Int                @default(0)
  lineSubTotal    Int                @default(0)
  lineVat         Int                @default(0)
  lineTotal       Int                @default(0)
  receiptLines    GoodsReceiptLine[]
  product         Product?           @relation(fields: [productId], references: [id])
  purchase        Purchase           @relation(fields: [purchaseId], references: [id])

  @@index([purchaseId])
}

model PurchaseCharge {
  id         String   @id @default(cuid())
  purchaseId String
  label      String
  amount     Int
  scope      String   @default("HEADER")
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
}

model PurchaseDiscount {
  id         String   @id @default(cuid())
  purchaseId String
  label      String
  amount     Int
  scope      String   @default("HEADER")
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
}

model GoodsReceipt {
  id         String             @id @default(cuid())
  purchaseId String
  date       DateTime           @default(now())
  warehouse  String             @default("MAIN")
  createdAt  DateTime           @default(now())
  purchase   Purchase           @relation(fields: [purchaseId], references: [id])
  lines      GoodsReceiptLine[]

  @@index([purchaseId, date])
}

model GoodsReceiptLine {
  id        String         @id @default(cuid())
  receiptId String
  itemId    String
  productId String?
  qty       Int
  lotCode   String?
  note      String?
  product   Product?       @relation(fields: [productId], references: [id])
  item      PurchaseItem   @relation(fields: [itemId], references: [id])
  receipt   GoodsReceipt   @relation(fields: [receiptId], references: [id])
  stockMove StockMovement?

  @@index([itemId])
}

model StockCard {
  id          String          @id @default(cuid())
  code        String          @unique
  name        String
  description String?
  category    String?
  type        String?
  kind        String?
  group       String?
  unit        String          @default("adet")
  criticalQty Int             @default(0)
  location    String          @default("MAIN")
  supplierId  String?
  tags        String          @default("")
  status      String          @default("ACTIVE")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  supplier    Supplier?       @relation(fields: [supplierId], references: [id])
  movements   StockMovement[]

  @@index([supplierId, category, status])
}

model StockMovement {
  id            String            @id @default(cuid())
  type          String
  productId     String?
  stockCardId   String?
  receiptLineId String?           @unique
  qty           Int
  unit          String            @default("adet")
  warehouse     String            @default("MAIN")
  date          DateTime          @default(now())
  note          String?
  referenceType String?
  referenceId   String?
  createdBy     String?
  receiptLine   GoodsReceiptLine? @relation(fields: [receiptLineId], references: [id])
  stockCard     StockCard?        @relation(fields: [stockCardId], references: [id])
  product       Product?          @relation(fields: [productId], references: [id])

  @@index([productId, date])
  @@index([stockCardId, date])
}

model Account {
  id        String    @id @default(cuid())
  type      String
  name      String
  currency  String    @default("TRY")
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  postings  Posting[]

  @@unique([name, type])
  @@index([type, isActive])
}

model Transaction {
  id         String    @id @default(cuid())
  date       DateTime  @default(now())
  kind       String
  amount     Int
  currency   String    @default("TRY")
  rateToTRY  Float     @default(1.0)
  note       String?
  customerId String?
  supplierId String?
  createdBy  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  postings   Posting[]

  @@index([date, kind])
  @@index([customerId])
  @@index([supplierId])
  @@index([createdBy])
}

model Posting {
  id            String      @id @default(cuid())
  transactionId String
  accountId     String
  dc            String
  amount        Int
  currency      String      @default("TRY")
  rateToTRY     Float       @default(1.0)
  createdAt     DateTime    @default(now())
  account       Account     @relation(fields: [accountId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([transactionId])
  @@index([accountId])
  @@index([dc])
}

model Employee {
  id                String        @id @default(cuid())
  firstName         String
  lastName          String
  tcNo              String?       @unique
  status            String        @default("ACTIVE")
  departmentId      String?
  department        String?
  position          String?
  hireDate          String
  terminationDate   String?
  wageType          String
  baseWageAmount    Int
  baseWageCurrency  String        @default("TRY")
  normalWeeklyHours Int           @default(45)
  phone             String?
  email             String?
  address           String?
  iban              String?
  sgkNo             String?
  shiftId           String?
  shiftName         String?
  advancePolicy     String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  allowances        Allowance[]
  payrollItems      PayrollItem[]
  sgkRecords        SgkRecord[]
  timeEntries       TimeEntry[]

  @@index([status, department])
  @@index([hireDate])
  @@index([tcNo])
}

model TimeEntry {
  id            String    @id @default(cuid())
  employeeId    String
  date          String
  startTime     String
  endTime       String
  durationHours Float
  type          String
  approved      Boolean   @default(false)
  note          String?
  approvedBy    String?
  approvedAt    DateTime?
  createdBy     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  employee      Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId, date])
  @@index([type, approved])
  @@index([date])
}

model Allowance {
  id         String   @id @default(cuid())
  employeeId String
  date       String
  kind       String
  amount     Int
  currency   String   @default("TRY")
  note       String?
  createdBy  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId, date])
  @@index([kind, date])
}

model SgkRecord {
  id                   String   @id @default(cuid())
  employeeId           String
  period               String
  baseAmount           Int
  employerShare        Int
  employeeShare        Int
  total                Int
  status               String   @default("UNPAID")
  paymentDate          String?
  financeTransactionId String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  employee             Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, period])
  @@index([period, status])
}

model PayrollRun {
  id              String        @id @default(cuid())
  periodStart     String
  periodEnd       String
  scope           String
  employeeIds     String?
  grossTotal      Int           @default(0)
  overtimeTotal   Int           @default(0)
  allowancesTotal Int           @default(0)
  deductionsTotal Int           @default(0)
  netTotal        Int           @default(0)
  status          String        @default("DRAFT")
  createdBy       String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  postedAt        DateTime?
  postedBy        String?
  items           PayrollItem[]

  @@index([periodStart, periodEnd])
  @@index([status])
}

model PayrollItem {
  id                         String     @id @default(cuid())
  payrollRunId               String
  employeeId                 String
  grossSalary                Int
  normalHours                Float
  overtimeHours              Float
  overtimeRate               Float
  overtimeAmount             Int
  allowancesTotal            Int
  deductionsTotal            Int
  netPay                     Int
  postedFinanceTransactionId String?
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt
  employee                   Employee   @relation(fields: [employeeId], references: [id])
  payrollRun                 PayrollRun @relation(fields: [payrollRunId], references: [id], onDelete: Cascade)

  @@unique([payrollRunId, employeeId])
  @@index([payrollRunId])
  @@index([employeeId])
}
